1) git add -A

2) git config --global alias.aliasName '!git add -A && git commit -m' // If we dont put '!git' , git will think that you want to add git infront of your command

3) git alisaName "New Commit"         // Two commands combined

3) git commit -a -m 'New commit'     /// but this doesn't add the all the files but the only files that are in the working/current directory

4) git config --global alias.ac 'commit -a -m'

5) git log                                 // prints all our recent commits

6) git revert hashcode                     // here hashcode is the unique hash of a commit // This command undoes the commit that we mention by creating a new commit but keeping the old commit.
    
     for example : git revert a12c136cbf4b4907c91adacedc761c5a702a91f4

7) git revert HEAD                         // it is going to undo the most recent commit by creating a brand new commit.

8) git reflog                              //logs all the commits that are done  and tells what hapened inside a log

9) git log --graph --decorate --oneline    // it shows the visual representation of how the log is going on with different branches

10) git log -S "Text 2"                    //search for where we made pirticular code changes
       
                                           stash commands
   
11) git stash                              // save your work temperorily , switch a branch and come back to your previous branch

12) // using //  - git stash pop           // which brings back all the previous changes 


                                           branch commands

13) git branch -vv                         // gives detailed information on all your branches

14) git remote update --prune              // it is going to delete the refernce to your remote repository if the branch no longer exists in your remote repository

15) git branch -vv | awk '/: gone]/{print $1}'   // This prints the name of the branch that is gone. The branch that no longer exists in your remote but in your local repository

16) git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d   // this command deletes the branch in local repository that is not there in the remote repository


                                            commands for debugging    
                                                   
17) git bisect start                         // essentially this is a binary search... this command is used to start

18) git bisect bad commithash              // to know where does the bug occur // if you dont provide the commit hash , git will assume that the bug occured in the latest commit

19) git bisect good commithash               // we pass the commit hash that we know is good, where the bug didn't occur for sure
              
          /// by doing this back and forth it will find the bug

                                             command to erase everything

20) git reset --hard origin/main            // all the changes are gone.




/// practice commands

1) git commit -a -m "new commit"

2) git add -A 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git ac "new commit"

5) git revert commithash 

6) git revert HEAD 

7) git reflog

8) git stash

9) git stash pop

10) git branch -vv

11) git remote update --prune

12) git branch -vv | awk '/: gone]/{print $1}'

13) git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d

14) git bisect start

15) git bisect bad

16) git bisect good 

17) git reset --hard origin/main

18) git log --graph --decorate --oneline

19) git log -S "Text2"
                                           practice for today again


1) git add - A

2) git commit -a -m 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git reflog

5) git revert commithash

6) git revert HEAD

7) git stash 

8) git stash pop

9) git branch -vv

10) git remote update --prune

11) git barnch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

13) git bisect start

14) git bisect bad

15) git bisect good 

16) git reset --hard origin/master

17) git log --graph --decorate --oneline

18) git log -S "Changes made"
  
               new command
19)  git config --global help.autocorrect 1

20) git config --global help.autocorrect 0

21) git rev-list --count main  // tells how many commits are done on the main branch


                  // commands to practice today 

1) git commit -m -a "New commit"

2) git add -A 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash

5) git reflog 

6) git log --decorate --graph --oneline

7) git log -S "Changes made"

8) git stash 

9) git stash pop 

10) git branch -vv 

11) git branch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

13) git bisect start 

14) git bisect bad 

15) git bisect good 

16) git reset --hard main/origin

17) git remote update --prune 
                       
                         // new commands practice 
18) git rev-list --count main 

19) git config --global help.autocorrect 1
 
20) git config --global help.autocorrect 0

                  New commands

21) git commit --allow-empty -m "No-op commit for triggering CI/CD"

22) git checkout -b new-branch // to create a new branch 

23) git push --set-upstream origin new-branch     // to create an upstream for the newly created branch so that we can push the commits to it 





                                   Daily commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash 

5) git stash 

6) git stash pop

7) git log --decorate --graph --oneline 

8) git reflog 

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git bisect start 

13) git bisect bad 

14) git bisect good 

15) git reset --hard origin/main 

16) git remote update --prune 

17) git config --global help.autocorrect 0

18) git config --global help.autocorrect 1

19) git commit --allow-empty -m 

20) git rebase -i origin/main 

21) git checkout -b new-branch    

22) git checkout new-branch 

23) git grep     // ONLY TRACKED FILES WILL BE SEARCHED BY GIT GREP 

24) git rev-list --count main 

25) git push --set-upstream origin main-branch 

                                 git commands to practice


1) git add -A 

2) git commit -a -m "New commit for today"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git config --global help.autocorrect 0

5) git config --global help.autocorrect 1

6) git revert commithash 

7) git stash 

8) git stash pop 

9) git remote update --prune 

10) git branch -vv 

11) git branch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/' gone]/{print$1}' | xargs git branch -d 

13) git log --decorate --oneline --graph 

14) git reflog 

15) git log -S "Changed text or code"

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git reset --hard origin/main 

20) git rebase -i origin/main 

21) git rev-list --count main 

22) git checkout -b "new-branch"

23) git grep 

24) git push --force 

25) git commit --allow-empty -m "No ops commit"

26) git push --set-upstream origin main-branch 

24) git checkout -   // takes to the previous branch 

                                         Commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash

5) git reflog

6) git stash 

7) git stash pop

8) git remote update --prune

9) git log --decorate --graph --oneline 

10) git bisect start 

11) git bisect bad 

12) git bisect good 

13) git branch -vv 

14) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

15) git branch -vv | awk '/: gone]/{print$1}'

16) git reset --hard origin/main 

17) git log -S "Changed text"

18) git grep 

19) git grep -i -n 

20) git rebase -i origin/main 

21) git rebase --continue 

22) git rebase --abort

23) git checkout -b 'new-branch'

24) git stash save "New stash"

25) git stash apply stash{0}

26) git cherrypick commithash

27) git rev-list --count main 

28) git push --set-upstream origin main-branch 

29) git push --force

30) git checkout -

31) git config --global help.autocorrect 0

32) git config --global help.autocorrect 1

33) git commit --allow-empty -m "No-ops commit"



                           precise commands 

1) git remote -v 

2) git grep --help 

3) git grep search-word
     
     // by default grep uses POSIX Regex

4) git grep 'main\(.+\)'  //if we wanted to find calls to main and we wanted to make sure that there was atleast one character inside the call to main 

    // To turn on Eexteded regex 

5) git grep -E main\(.+\)     // for windows donot use 'main\(.+\)'

6) git grep -l -E main\(.+\)               // the most useful option is -l , this shows just the file names that have the specified text in them

7) git grep -l -E main\(.+\) > TextFile.txt       //  this is in windows and only to copy the output into a textfile 

8) git grep -l -E main\(.+\) -- directoryName            // specify the directory that you want to search with --directoryName

9) git grep -l -E main\(.+\) -- *.py

10) echo git grep -l -E main\(.+\) -- *.py

11) git grep -L -E main\(.+\) -- *.py           // -L is to find files that dont match pirticular patterns

    //this above command is to atch the .py files that dont call main 

               rebase 


12)git clone git@github.com:pre-commit/pre-commit-hooks

13) git remote add 

14) git fetch AdityaKhursale 

15) git checkout AdityaKhursale/master -b AdityaKhursale_master

16) git branch -u origin/master 

17) git status 

18) git rebase -i origin/main 


     in worst caes use reflog 


19) git reflog 

20) git show 

// when you are done editing then use 

21) git rebase --continue

22) git push AdityaKhursale HEAD:master 

23) git push AdityaKhurasale HEAD:master -f 


end 

////// A way to make git status command not terribly slow for extremly large repos such as monolithic repos

1) git clone git@github.com:trovalds/linux --depth1                   // "depth1"  helps clone the repo faster

2) time git status            // The first time it will always be slow cuz i don't have file system chaching set up or any of the git index caching 

3) git config feature.manyFiles 1      // 1) newer version of the index file 
                                       // 2) It turns  the uncached files to true....basically it will cache whether a file has been touched or not. even though it is untracked that way it doeant have to recheck 
                                       core.untrackedCache=true  // This option is only safe if your machine implements mtime properly.


4) nano .git/config

5) man git config   

                                                   git repository inside git repository  (SUB-MODULES)


They can often be useful if you are trying to include some of the repository but you don't have a proper package manager to do so

1) HOW TO CREATE A SUBMODULE

2) HOW TO CLONE A REPOSITORY THAT HAS A SUBMODULE 

3) HOW TO UPDATE A SUBMODULE

4) HOW TO DELETE A SUBMODULE 


COMMANDS TYPED: 

1) git init empty 

2) git commit --allow-empty -m "New commit for the day"

3) git status 

4) ls 

5) git submodule add http://github.com/adtpretty         // the git submodule add takes a url and a path, but here we only use the url 

(Note : provide http if you think it is an opensource , if you want it to be private use ssh)


6) git status  

(what are simlinks?)


7) git diff --staged      // In the output "new file mode 160000" tells that this is not a real file and it is a submodule instead 


downsides of submodules 

1) it is hard to see from a diff whether you are ncreasing or decreasing the version of submodule 

(project - buring down the number of submodules)

8) git commit -m "add submodule in the repository"

9) git clone empty empty-clone 

10) git status 

11) ls
         /// by default submodules are not clones but you force clone submodules when you clone your repository by doing 
12) git clone empty empty-clone2 --recursive

13) cd empty-clone2

14) ls astpretty

15) cd ../empty-clone 

16) git submodule update --init 

17) git submodule update --init --recursive   //incase if the submodule has a submodule inside of it 

18) cd astpretty/

19) git tag -l           // shows different versions of submodules 

20) git checkout v1.5.0       // do this inside of the submodule... this will change the version that it is pointing to 

21) cd.. 

22) git status 

23) git commit -m "Changed the version"      // finally change the version by making a commit 


Delete submodule 

24) git rm astpretty/ 

25) git commit -m "Deleted the submodule"

26) git show 

                                       Daily practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.c "!git add -A && git commit -m"

4) git config --global help.autocorrect 0

5) git config --global help.autocorrect 1

6) git revert hashcommit 

7) git reflog 

8) git revert head 

9) git log --decorate --oneline --graph 

10) git log -S "CHANGED TEXT"

11) git remote update --prune 

12) git stash save "Saved"

13) git stash apply stash{0}

14) git stash pop 

15) git stash list 

16) git branch -vv 

17) git branch -vv | awk '/: gone]/{print$1}'

18) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

19) git bisect start 

20) git bisect bad 

21) git bisect good 

22) git reset --hard origin 

23) git checkout -b "new branch"

24) git checkout -

25) git commit --set-upstream -m "Setting upstream for a new branch"

26) git rev-list --count main 

27) git grep 

28) git grep -l -E main\(.+\) 

29) git grep -L -E main\(.+\)

30) git grep -L -E main\(.+\) -- directoryName

31) git rebase -i origin/main 

32) git rebase --continue 

33) git rebase --abort 

34) git commit --allow-empty -m "NO ops commit"

35) notepad .git/config

36) git config feature.manyFiles


                                        git commands to practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config ---global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash

6) git remote update --prune 

7) git reflog 

8) git log --decorate --oneline --graph 

9) git log -S "changed texts"

10) git branch -vv

11) git branch -vv | awk '/: gone]/{print$1}

12) git branch -vv | awk '/: gone]/{print$1} | xargs git branch -d 

13) git stash save "New stash"

14) git stash list 

15) git stash apply stash{0}

16) git stash pop 

17) git bisect start 

18) git bisect bad 

19) git bisect good 

20) git reset --hard origin/main

21) git push --force 

22) git checkout -b "New-branch"

23) git commit --allow-empty -m "No-ops commit"

24) git rev-list --count main

25) git config --global help.autocorrect 0

26) git config --global help.autocorrect 1

27) git push --set-upstream main 

28) git grep -i -n key-wrod 

29) git grep -l -E main\(.+\) -- *.py 

30) git rebase -i origin/main 

31) git rebase --continue 

32) git rebase --abort 

33) git config feature.manyfiles 1

34) git checkout - 

35) git remote -v 

36) git init empty 

37) git diff --staged 

                                   New command 

git rebase -i --root           // It helps to operate when you didn't create any empty or no-ops commit at the beginning(see video #029)



                                 Git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "New text"

4) git revert head 

5) git revert commithash

6) git reflog 

7) git log --graph --decorate --oneline 

8) git log -S "changes made"

9) git stash save "New stash"

10) git stash apply stash{0}

11) git stash pop 

12) git branch -vv 

13) git branch -vv | awk '/: gone]/{print$1}'

14) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

15) git bisect start 

16) git bisect bad 

17) git bisect good 

18) git remote update --prune 

19) git reset --hard origin/main 

20) git remote -v 

21) git grep -i 

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- '*.py'

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git commit --set-upstream -m "Another commit"

28) git config --global help.autocorrect 1

29) git config --global help.autocorrect 0

30) git config feature.manyFile 1

31) git push --force 

32) git checkout -b "nw-branch"

33) git checkout -

34) git rebase --root 

35) git commit --allow-empty -m 

36) git diff --staged 


                                        New commands 

git status --ignored       / / shows ignored files aswell

git push -4   , git pull -4   // forces git to use ipv4


                                        commands daily practice 

1) git add -A 

2) git commit -m -a "New commit"

3) git config --global alias.ac  "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "Changed text"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

11) git branch -vv | awk '/" gone]/{print$1}'

12) git stash save "Saved to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git reset --hard origin/main 

20) git checkout -b "new_branch"

21) git checkout - 

22) git push --set-upstream origin/main

23) git push --force 

24) git push -4 

25) git pull -4 

26) git rebase -i origin/main 

27) git rebase --continue 

28) git rebase --abort 

29) git rebase --root 

30) git commit -m --allow-empty "No-ops commit"

31) git rev-list --count main 

32) git ammend commithash 

33) git config --global help.autocorrect 1

34) git config --global help.autocorrect 0 

35) git diff --staged 

36) git init x 

37) git grep -i -n 'keyword'

38) git grep -l -E main\(.+\)

39) git grep -L -E main\(.+\) -- "*.py"

40) git remote -v 

41) git remote update --prune 

42) git feature.manyFiles 1

43) git submodule add "http//:github.com/sandy9904"

44) git clone empty empty-clone --recursive 

45) git submodule update --init 

46) git submodule update --init --recursive 

47) git rm /submodule_name 

48) git tag -l

49) waiting fo rthe next.....

                // after adding a File, if you use the command "git diff --staged" in windows , linux or mingw64 , if the mode is 100755, the file added is executable
                // If it is 100644, the file is non-executable file  
                // but chmod cannot be used in windows so u need to use icacls or just use mingw64 which is linux bash 

                                     commands to practice 

1) git add -A  

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "Changes made"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "New stash saved"
         
13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git rebase -i origin/main 

23) git rebase -i root 

24) git commit -m --allow-empty "No-ops commit"

25) git push --set-upstream origin/main 

26) git remote -v 

27) git init localRep 

28) git rebase --continue 

29) git rebase --abort

30) git grep -i -n "The latest commit"

31) git grep -l -E main\(.+\)

32) git grep -L -E main\(.+\)

33) git submodule add "repo"

34) git clone empty empty-clone --recursive

35) git submodule update -- init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git checkout - 

39) git checkout -b "New branch"

40) git config feature.manyFiles 1

41) time git status 

42) git show 

43) git diff --staged 

44) git config help.autocorrect 1

45) git config help.autocorrect 0 

46) git push -4 

47) git pull -4

48) git tag -l 

49) git push --force 

50) git ammend commithash 


                                             git commands practice 


1) git add -A 

2) git commit -a -m "First commit"

3) git config --global alias.ac "!git add -A && commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --graph -oneline 

8) git log -S "Changed text"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1} | xargs git branch -d

11) git branch -vv | awk '/: gone]/{print$1}'

12) git stash save "Saveing to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git rev-list --count main 

17) git bisect start 

18) git bisect good

19) git bisect bad 

20) git reset --hard origin/main 

21) git chekout -b "New branch"

22) git checkout - 

23) git rebase -i origin/main  

24) git rebase --continue 

25) git rebase --abort 

26) git rebase -i root 

27) git grep -i -n "keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\)  -- '*.py'

30) git ammend commithah 

31) git push -4

32) git pull - 

33) git push --set-upstream origin/main

34) git config --global help.autocorrect 1

35) git config --global help.autocorrect 0

36) git config feature.manyFiles 1

37) git submodule add "rep_name"

38) git clone empty empty-clone2 --recursive

39) git submodule update --init 

40) git submodule update --init --recursive

41) git rm submodule_name/

42) 