1) git add -A

2) git config --global alias.aliasName '!git add -A && git commit -m' // If we dont put '!git' , git will think that you want to add git infront of your command

3) git alisaName "New Commit"         // Two commands combined

3) git commit -a -m 'New commit'     /// but this doesn't add the all the files but the only files that are in the working/current directory

4) git config --global alias.ac 'commit -a -m'

5) git log                                 // prints all our recent commits

6) git revert hashcode                     // here hashcode is the unique hash of a commit // This command undoes the commit that we mention by creating a new commit but keeping the old commit.
    
     for example : git revert a12c136cbf4b4907c91adacedc761c5a702a91f4

7) git revert HEAD                         // it is going to undo the most recent commit by creating a brand new commit.

8) git reflog                              //logs all the commits that are done  and tells what hapened inside a log

9) git log --graph --decorate --oneline    // it shows the visual representation of how the log is going on with different branches

10) git log -S "Text 2"                    //search for where we made pirticular code changes
       
                                           stash commands
   
11) git stash                              // save your work temperorily , switch a branch and come back to your previous branch

12) // using //  - git stash pop           // which brings back all the previous changes 


                                           branch commands

13) git branch -vv                         // gives detailed information on all your branches

14) git remote update --prune              // it is going to delete the refernce to your remote repository if the branch no longer exists in your remote repository

15) git branch -vv | awk '/: gone]/{print $1}'   // This prints the name of the branch that is gone. The branch that no longer exists in your remote but in your local repository

16) git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d   // this command deletes the branch in local repository that is not there in the remote repository


                                            commands for debugging    
                                                   
17) git bisect start                         // essentially this is a binary search... this command is used to start

18) git bisect bad commithash              // to know where does the bug occur // if you dont provide the commit hash , git will assume that the bug occured in the latest commit

19) git bisect good commithash               // we pass the commit hash that we know is good, where the bug didn't occur for sure
              
          /// by doing this back and forth it will find the bug

                                             command to erase everything

20) git reset --hard origin/main            // all the changes are gone.




/// practice commands

1) git commit -a -m "new commit"

2) git add -A 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git ac "new commit"

5) git revert commithash 

6) git revert HEAD 

7) git reflog

8) git stash

9) git stash pop

10) git branch -vv

11) git remote update --prune

12) git branch -vv | awk '/: gone]/{print $1}'

13) git branch -vv | awk '/: gone]/{print $1}'

14) git bisect start

15) git bisect bad

16) git bisect good 

                                           practice for today again


1) git add - A

2) git commit -a -m 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git reflog

5) git revert commithash

6) git revert HEAD

7) git stash 

8) git stash pop

9)    