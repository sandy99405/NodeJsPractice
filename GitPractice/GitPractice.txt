1) git add -A

2) git config --global alias.aliasName '!git add -A && git commit -m' // If we dont put '!git' , git will think that you want to add git infront of your command

3) git alisaName "New Commit"         // Two commands combined

3) git commit -a -m 'New commit'     /// but this doesn't add the all the files but the only files that are in the working/current directory

4) git config --global alias.ac 'commit -a -m'

5) git log                                 // prints all our recent commits

6) git revert hashcode                     // here hashcode is the unique hash of a commit // This command undoes the commit that we mention by creating a new commit but keeping the old commit.
    
     for example : git revert a12c136cbf4b4907c91adacedc761c5a702a91f4

7) git revert HEAD                         // it is going to undo the most recent commit by creating a brand new commit.

8) git reflog                              //logs all the commits that are done  and tells what hapened inside a log

9) git log --graph --decorate --oneline    // it shows the visual representation of how the log is going on with different branches

10) git log -S "Text 2"                    //search for where we made pirticular code changes
       
                                           stash commands
   
11) git stash                              // save your work temperorily , switch a branch and come back to your previous branch

12) // using //  - git stash pop           // which brings back all the previous changes 


                                           branch commands

13) git branch -vv                         // gives detailed information on all your branches

14) git remote update --prune              // it is going to delete the refernce to your remote repository if the branch no longer exists in your remote repository

15) git branch -vv | awk '/: gone]/{print $1}'   // This prints the name of the branch that is gone. The branch that no longer exists in your remote but in your local repository

16) git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d   // this command deletes the branch in local repository that is not there in the remote repository


                                            commands for debugging    
                                                   
17) git bisect start                         // essentially this is a binary search... this command is used to start

18) git bisect bad commithash              // to know where does the bug occur // if you dont provide the commit hash , git will assume that the bug occured in the latest commit

19) git bisect good commithash               // we pass the commit hash that we know is good, where the bug didn't occur for sure
              
          /// by doing this back and forth it will find the bug

                                             command to erase everything

20) git reset --hard origin/main            // all the changes are gone.




/// practice commands

1) git commit -a -m "new commit"

2) git add -A 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git ac "new commit"

5) git revert commithash 

6) git revert HEAD 

7) git reflog

8) git stash

9) git stash pop

10) git branch -vv

11) git remote update --prune

12) git branch -vv | awk '/: gone]/{print $1}'

13) git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d

14) git bisect start

15) git bisect bad

16) git bisect good 

17) git reset --hard origin/main

18) git log --graph --decorate --oneline

19) git log -S "Text2"
                                           practice for today again


1) git add - A

2) git commit -a -m 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git reflog

5) git revert commithash

6) git revert HEAD

7) git stash 

8) git stash pop

9) git branch -vv

10) git remote update --prune

11) git barnch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

13) git bisect start

14) git bisect bad

15) git bisect good 

16) git reset --hard origin/master

17) git log --graph --decorate --oneline

18) git log -S "Changes made"
  
               new command
19)  git config --global help.autocorrect 1

20) git config --global help.autocorrect 0

21) git rev-list --count main  // tells how many commits are done on the main branch


                  // commands to practice today 

1) git commit -m -a "New commit"

2) git add -A 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash

5) git reflog 

6) git log --decorate --graph --oneline

7) git log -S "Changes made"

8) git stash 

9) git stash pop 

10) git branch -vv 

11) git branch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

13) git bisect start 

14) git bisect bad 

15) git bisect good 

16) git reset --hard main/origin

17) git remote update --prune 
                       
                         // new commands practice 
18) git rev-list --count main 

19) git config --global help.autocorrect 1
 
20) git config --global help.autocorrect 0

                  New commands

21) git commit --allow-empty -m "No-op commit for triggering CI/CD"

22) git checkout -b new-branch // to create a new branch 

23) git push --set-upstream origin new-branch     // to create an upstream for the newly created branch so that we can push the commits to it 





                                   Daily commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash 

5) git stash 

6) git stash pop

7) git log --decorate --graph --oneline 

8) git reflog 

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git bisect start 

13) git bisect bad 

14) git bisect good 

15) git reset --hard origin/main 

16) git remote update --prune 

17) git config --global help.autocorrect 0

18) git config --global help.autocorrect 1

19) git commit --allow-empty -m 

20) git rebase -i origin/main 

21) git checkout -b new-branch    

22) git checkout new-branch 

23) git grep     // ONLY TRACKED FILES WILL BE SEARCHED BY GIT GREP 

24) git rev-list --count main 

25) git push --set-upstream origin main-branch 

                                 git commands to practice


1) git add -A 

2) git commit -a -m "New commit for today"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git config --global help.autocorrect 0

5) git config --global help.autocorrect 1

6) git revert commithash 

7) git stash 

8) git stash pop 

9) git remote update --prune 

10) git branch -vv 

11) git branch -vv | awk '/: gone]/{print$1}'

12) git branch -vv | awk '/' gone]/{print$1}' | xargs git branch -d 

13) git log --decorate --oneline --graph 

14) git reflog 

15) git log -S "Changed text or code"

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git reset --hard origin/main 

20) git rebase -i origin/main 

21) git rev-list --count main 

22) git checkout -b "new-branch"

23) git grep 

24) git push --force 

25) git commit --allow-empty -m "No ops commit"

26) git push --set-upstream origin main-branch 

24) git checkout -   // takes to the previous branch 

                                         Commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash

5) git reflog

6) git stash 

7) git stash pop

8) git remote update --prune

9) git log --decorate --graph --oneline 

10) git bisect start 

11) git bisect bad 

12) git bisect good 

13) git branch -vv 

14) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

15) git branch -vv | awk '/: gone]/{print$1}'

16) git reset --hard origin/main 

17) git log -S "Changed text"

18) git grep 

19) git grep -i -n 

20) git rebase -i origin/main 

21) git rebase --continue 

22) git rebase --abort

23) git checkout -b 'new-branch'

24) git stash save "New stash"

25) git stash apply stash{0}

26) git cherrypick commithash

27) git rev-list --count main 

28) git push --set-upstream origin main-branch 

29) git push --force

30) git checkout -

31) git config --global help.autocorrect 0

32) git config --global help.autocorrect 1

33) git commit --allow-empty -m "No-ops commit"



                           precise commands 

1) git remote -v 

2) git grep --help 

3) git grep search-word
     
     // by default grep uses POSIX Regex

4) git grep 'main\(.+\)'  //if we wanted to find calls to main and we wanted to make sure that there was atleast one character inside the call to main 

    // To turn on Eexteded regex 

5) git grep -E main\(.+\)     // for windows donot use 'main\(.+\)'

6) git grep -l -E main\(.+\)               // the most useful option is -l , this shows just the file names that have the specified text in them

7) git grep -l -E main\(.+\) > TextFile.txt       //  this is in windows and only to copy the output into a textfile 

8) git grep -l -E main\(.+\) -- directoryName            // specify the directory that you want to search with --directoryName

9) git grep -l -E main\(.+\) -- *.py

10) echo git grep -l -E main\(.+\) -- *.py

11) git grep -L -E main\(.+\) -- *.py           // -L is to find files that dont match pirticular patterns

    //this above command is to atch the .py files that dont call main 

               rebase 


12)git clone git@github.com:pre-commit/pre-commit-hooks

13) git remote add 

14) git fetch AdityaKhursale 

15) git checkout AdityaKhursale/master -b AdityaKhursale_master

16) git branch -u origin/master 

17) git status 

18) git rebase -i origin/main 


     in worst caes use reflog 


19) git reflog 

20) git show 

// when you are done editing then use 

21) git rebase --continue

22) git push AdityaKhursale HEAD:master 

23) git push AdityaKhurasale HEAD:master -f 


end 

////// A way to make git status command not terribly slow for extremly large repos such as monolithic repos

1) git clone git@github.com:trovalds/linux --depth1                   // "depth1"  helps clone the repo faster

2) time git status            // The first time it will always be slow cuz i don't have file system chaching set up or any of the git index caching 

3) git config feature.manyFiles 1      // 1) newer version of the index file 
                                       // 2) It turns  the uncached files to true....basically it will cache whether a file has been touched or not. even though it is untracked that way it doeant have to recheck 
                                       core.untrackedCache=true  // This option is only safe if your machine implements mtime properly.


4) nano .git/config

5) man git config   

                                                   git repository inside git repository  (SUB-MODULES)


They can often be useful if you are trying to include some of the repository but you don't have a proper package manager to do so

1) HOW TO CREATE A SUBMODULE

2) HOW TO CLONE A REPOSITORY THAT HAS A SUBMODULE 

3) HOW TO UPDATE A SUBMODULE

4) HOW TO DELETE A SUBMODULE 


COMMANDS TYPED: 

1) git init empty 

2) git commit --allow-empty -m "New commit for the day"

3) git status 

4) ls 

5) git submodule add http://github.com/adtpretty         // the git submodule add takes a url and a path, but here we only use the url 

(Note : provide http if you think it is an opensource , if you want it to be private use ssh)


6) git status  

(what are simlinks?)


7) git diff --staged      // In the output "new file mode 160000" tells that this is not a real file and it is a submodule instead 


downsides of submodules 

1) it is hard to see from a diff whether you are ncreasing or decreasing the version of submodule 

(project - buring down the number of submodules)

8) git commit -m "add submodule in the repository"

9) git clone empty empty-clone 

10) git status 

11) ls
         /// by default submodules are not clones but you force clone submodules when you clone your repository by doing 
12) git clone empty empty-clone2 --recursive

13) cd empty-clone2

14) ls astpretty

15) cd ../empty-clone 

16) git submodule update --init 

17) git submodule update --init --recursive   //incase if the submodule has a submodule inside of it 

18) cd astpretty/

19) git tag -l           // shows different versions of submodules 

20) git checkout v1.5.0       // do this inside of the submodule... this will change the version that it is pointing to 

21) cd.. 

22) git status 

23) git commit -m "Changed the version"      // finally change the version by making a commit 


Delete submodule 

24) git rm astpretty/ 

25) git commit -m "Deleted the submodule"

26) git show 

                                       Daily practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.c "!git add -A && git commit -m"

4) git config --global help.autocorrect 0

5) git config --global help.autocorrect 1

6) git revert hashcommit 

7) git reflog 

8) git revert head 

9) git log --decorate --oneline --graph 

10) git log -S "CHANGED TEXT"

11) git remote update --prune 

12) git stash save "Saved"

13) git stash apply stash{0}

14) git stash pop 

15) git stash list 

16) git branch -vv 

17) git branch -vv | awk '/: gone]/{print$1}'

18) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

19) git bisect start 

20) git bisect bad 

21) git bisect good 

22) git reset --hard origin 

23) git checkout -b "new branch"

24) git checkout -

25) git commit --set-upstream -m "Setting upstream for a new branch"

26) git rev-list --count main 

27) git grep 

28) git grep -l -E main\(.+\) 

29) git grep -L -E main\(.+\)

30) git grep -L -E main\(.+\) -- directoryName

31) git rebase -i origin/main 

32) git rebase --continue 

33) git rebase --abort 

34) git commit --allow-empty -m "NO ops commit"

35) notepad .git/config

36) git config feature.manyFiles


                                        git commands to practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config ---global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash

6) git remote update --prune 

7) git reflog 

8) git log --decorate --oneline --graph 

9) git log -S "changed texts"

10) git branch -vv

11) git branch -vv | awk '/: gone]/{print$1}

12) git branch -vv | awk '/: gone]/{print$1} | xargs git branch -d 

13) git stash save "New stash"

14) git stash list 

15) git stash apply stash{0}

16) git stash pop 

17) git bisect start 

18) git bisect bad 

19) git bisect good 

20) git reset --hard origin/main

21) git push --force 

22) git checkout -b "New-branch"

23) git commit --allow-empty -m "No-ops commit"

24) git rev-list --count main

25) git config --global help.autocorrect 0

26) git config --global help.autocorrect 1

27) git push --set-upstream main 

28) git grep -i -n key-wrod 

29) git grep -l -E main\(.+\) -- *.py 

30) git rebase -i origin/main 

31) git rebase --continue 

32) git rebase --abort 

33) git config feature.manyfiles 1

34) git checkout - 

35) git remote -v 

36) git init empty 

37) git diff --staged 

                                   New command 

git rebase -i --root           // It helps to operate when you didn't create any empty or no-ops commit at the beginning(see video #029)



                                 Git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "New text"

4) git revert head 

5) git revert commithash

6) git reflog 

7) git log --graph --decorate --oneline 

8) git log -S "changes made"

9) git stash save "New stash"

10) git stash apply stash{0}

11) git stash pop 

12) git branch -vv 

13) git branch -vv | awk '/: gone]/{print$1}'

14) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

15) git bisect start 

16) git bisect bad 

17) git bisect good 

18) git remote update --prune 

19) git reset --hard origin/main 

20) git remote -v 

21) git grep -i 

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- '*.py'

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git commit --set-upstream -m "Another commit"

28) git config --global help.autocorrect 1

29) git config --global help.autocorrect 0

30) git config feature.manyFile 1

31) git push --force 

32) git checkout -b "nw-branch"

33) git checkout -

34) git rebase --root 

35) git commit --allow-empty -m 

36) git diff --staged 


                                        New commands 

git status --ignored       / / shows ignored files aswell

git push -4   , git pull -4   // forces git to use ipv4


                                        commands daily practice 

1) git add -A 

2) git commit -m -a "New commit"

3) git config --global alias.ac  "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "Changed text"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

11) git branch -vv | awk '/" gone]/{print$1}'

12) git stash save "Saved to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git reset --hard origin/main 

20) git checkout -b "new_branch"

21) git checkout - 

22) git push --set-upstream origin/main

23) git push --force 

24) git push -4 

25) git pull -4 

26) git rebase -i origin/main 

27) git rebase --continue 

28) git rebase --abort 

29) git rebase --root 

30) git commit -m --allow-empty "No-ops commit"

31) git rev-list --count main 

32) git ammend commithash 

33) git config --global help.autocorrect 1

34) git config --global help.autocorrect 0 

35) git diff --staged 

36) git init x 

37) git grep -i -n 'keyword'

38) git grep -l -E main\(.+\)

39) git grep -L -E main\(.+\) -- "*.py"

40) git remote -v 

41) git remote update --prune 

42) git feature.manyFiles 1

43) git submodule add "http//:github.com/sandy9904"

44) git clone empty empty-clone --recursive 

45) git submodule update --init 

46) git submodule update --init --recursive 

47) git rm /submodule_name 

48) git tag -l

49) waiting fo rthe next.....

                // after adding a File, if you use the command "git diff --staged" in windows , linux or mingw64 , if the mode is 100755, the file added is executable
                // If it is 100644, the file is non-executable file  
                // but chmod cannot be used in windows so u need to use icacls or just use mingw64 which is linux bash 

                                     commands to practice 

1) git add -A  

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "Changes made"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "New stash saved"
         
13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git rebase -i origin/main 

23) git rebase -i root 

24) git commit -m --allow-empty "No-ops commit"

25) git push --set-upstream origin/main 

26) git remote -v 

27) git init localRep 

28) git rebase --continue 

29) git rebase --abort

30) git grep -i -n "The latest commit"

31) git grep -l -E main\(.+\)

32) git grep -L -E main\(.+\)

33) git submodule add "repo"

34) git clone empty empty-clone --recursive

35) git submodule update -- init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git checkout - 

39) git checkout -b "New branch"

40) git config feature.manyFiles 1

41) time git status 

42) git show 

43) git diff --staged 

44) git config help.autocorrect 1

45) git config help.autocorrect 0 

46) git push -4 

47) git pull -4

48) git tag -l 

49) git push --force 

50) git ammend commithash 


                                             git commands practice 


1) git add -A 

2) git commit -a -m "First commit"

3) git config --global alias.ac "!git add -A && commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --graph -oneline 

8) git log -S "Changed text"

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1} | xargs git branch -d

11) git branch -vv | awk '/: gone]/{print$1}'

12) git stash save "Saveing to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git rev-list --count main 

17) git bisect start 

18) git bisect good

19) git bisect bad 

20) git reset --hard origin/main 

21) git chekout -b "New branch"

22) git checkout - 

23) git rebase -i origin/main  

24) git rebase --continue 

25) git rebase --abort 

26) git rebase -i root 

27) git grep -i -n "keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\)  -- '*.py'

30) git ammend commithah 

31) git push -4

32) git pull - 

33) git push --set-upstream origin/main

34) git config --global help.autocorrect 1

35) git config --global help.autocorrect 0

36) git config feature.manyFiles 1

37) git submodule add "rep_name"

38) git clone empty empty-clone2 --recursive

39) git submodule update --init 

40) git submodule update --init --recursive

41) git rm submodule_name/

42) git remote -v 

43) git commit -m --allow-empty "No-ops commit"

44) git init x

45) git push --force 

46) git tag -l 

47) git diff --staged 

48) git show 

49) time git status 

50) git remote update --prune 

                                         git commands practice

1) git add -A 

2) git commit -a -m "first commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "Changes made"

9) git branch -vv

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "Savd to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main

20) git config --global help.autocorrect 0

21) git config --global help.autocorrect 1 

22) git rebase -i origin/main 

23) git rebase --continue

24) git rebase --abort 

25) git rebase -i root 

26) git grep -i -n "keyword"

27) git grep -l -E main\(.+\)

28) git grep -L -E main\(.+\) -- "*.py"

29) git push --force 

30) git push --set-upstream origin/main 

31) git checkout -b "new_branch"

32) git checkout - 

33) git push -4 

34) git pull -4 

35) git ammend commithash 

36) git config feature.mantFiles 1

37) git submodule add "Repo"

38) git clone empty empty-clone2 --recursive 

39) git submodule update --init 

40) git submodule update --init --recursive 

41) git rm submodule_name/

42) git rev-list --count main 

43) git remote update --prune 

44) git remote -v 

45) git init empty_repo 

46) git show 

47) git diff --staged 

48) time git status 

49) git tag -l 

50) git commit -m --allow-empty "No-ops commit"

                                          // New commands 

51) git worktree add 

52) git worktree list 

53) git worktree remove 


                                   commands prcatice 

1) git add -a

2) git commit -a -m "New commit"

3) git revert head 

4) git revert commithash

5) git reflog 

6) git log --decorate --oneline --graph 

7) git log -S "text changes"

8) git stash save "Seaved to stash"

9) git stash apply stash{0}

10) git stash list 

11) git stash pop 

12) git branch -vv 

13) git branch -vv | awk '/: gone]/{print$1}'

14) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

15) git bisect start 

16) git bisect good

17) git bisect bad 

18) git reset --hard origin/main 

19) git remote update --prune 

20) git config --global alias.ac "!git add -A && git commit -m"

21) git config --global help.autocorrect 1

22) git config --global help.autocorrect 0

23) git checkout -

24) git checkout -b "New_branch"

25) git push --force 

26) git push --set-upstream origin/main 

27) git push -4

28) git pull -4 

29) git grep -i -n "keyword"

30) git grep -l -E main\(.+\)

31) git grep -L -E main\(.+\) -- "*.py"

32) git rebase -i origin/main

33) git rebase --continue 

34) git rebase --abort 

35) git rebase -i root 

36) git commit -m --allow-empty "No-ops commit"

37) git config feature.manyFiles 1

38) git ammend commithash

39) time git status 

40) git remote -v 

41) git init empty_repo 

42) git submodule add submodule_name 

43) git clone empty empty-clone2 --recursive 

44) git submodule update --init 

45) git submodule update --init --recursive 

46) git rm submodule_name/

47) git tag -l 

48) git diff --staged 

49) git show 

50) git rev-list --count main 


                                    New commands 
1) git worktree add 

2) git worktree remove 

3) git worktree list 


                                   // git commands to pracitce 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --oneline --decorate --graph 

8) git log -S "changed text"

9) git stash save "Saved to stash"

10) git stash apply stash{1}

11) git stash list 

12) git stash pop 

13) git branch -vv 

14) git branch -vv | awk '/: gone]/{print$1}'

15) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

16) git bisect start 

17) git bisect bad 

18) git bisect good 

19) git reset --hard origin/main 

20) git rev-list --count main 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "Keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git config feature.manyFiles 1

29) git config --global help.autocorrect 1

30) git config --global help.autocorrect 0

31) git push --force 

32) git push -4 

33) git push --set-upstream origin/main 

34) git pull -4

35) time git status 

36) git diff --staged 

37) git tag -l 

38) git checkout - 

39) git checkout -b "new branch"

40) git submodule add url

41) git clone empty empty-clone2 recursive 

42) git submodule update --init 

43) git submodule update --init --recursive 

44) git rm submodule/

45) git init empty_repo 

46) git remote -v 

47) git commit -m --allow-empty "No-ops commit"

48) git show 

49) git ammend commithash 

50) git remote update --prune 

51) git worktree add 

52) git worktree list 

53) git worktree remove 


                                             git commands practice 

1) git add -A 

2) git commit -a -m "New commit of the day"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv

8) git branch -vv | awk '/: gone]/{print$1}'

9) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

10) git stash save "New stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git reset --hard origin/main 

18) git remote update --prune 

19) git rev-list --count main 

20) git checkout - 

21) git checkout -b "new_branch"

22) git remote -v 

23) git rebase -i origin/main 

24) git rebase --continue 

25) git rebase --abort 

26) git rebase -i root 

27) git grep -i -n "keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\) -- "*.py"

30) git config --global help.autocorrect 1

31) git config --global help.autocorrect 0

32) git config feature.manyFiles 1

33) git push --force origin/main 

34) git push -4

35) git pull -4 

36) git push --set-upstream origin/main 

37) git commit -m --allow-empty "No-ops commit"

38) git submodule add sub_url

39) git clone empty empty-clone2 --recursive 

40) git submodule update --init 

41) git submodule update --init --recursive 

42) git rm sub_url/

43) git init empty_repo 

44) git diff --staged 

45) git tag -l 

46) git show 

47) time git status  

48) git log -S "text changed"

49) git log --decorate --online --graph 

50) git ammend commithash 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

                                     commnads to practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log --decorate --oneline --graph 

8) git log -S "changed text"

9) git branch -vv

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1} | xargs git branch -d 

12) git stash save "saved to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git rev-list --count main 

21) git remote update --prune 

22) git rebase -i origin/main 

23) git rebase --continue 

24) git rebase --abort 

25) git rebase -i root 

26) git grep -i -n "keyword"

27) git grep -l -E main\(.+\)

28) git grep -L -E main\(.+\) --"*.py"

29) git submodule add url 

30) git clone empty empty-clone2 --recursive 

31) git submodule update --init 

32) git submoudle update --init --recursive 

33) git rm submodule_name/

34) git config --global help.autocorrect 1

35) git config --global help.autocorrect 0

36) git push --force origin/main 

37) git push -4 

38) git pull -4 

39) git push --set-upstream origin/main 

40) git config feature.manyFiles 1

41) git diff --staged 

42) git show 

43) time git status 

44) git tag -l 

45) git checkout - 

46) git checkout -b "new_branch"

47) git remote -v 

48) git init empty_repo 

49) git ammend commithash 

50) git commit -m --alow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                       git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git rev-list --count main 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) --"*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root

28) git push --force origin/main 

29) git push -4

30) git push --set-upstream origin/main 

31) git pull -4

32) git checkout -

33) git checkout -b "New_branch"

34) git submodule add url

35) git clone empty empty-clone2 --recursive

36) git submodule update --init 

37) git submoudle update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) git tag -l 

44) git commit -m --allow-empty "No-ops commit"

45) git show 

46) time git status

47) git ammend commithash

48) git init empty_repo

49) git remote -v

50) git remote update --prune

51) git worktree add

52) git worktree remove

53) git worktree list 


                                            git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git branch -vv

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d

12) git stash save "Saved to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebse -i root

25) git grep -i -n "keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git rev-list --count main 

29) git submodule add url

30) git clone empty empty-clone2 --recursive 

31) git submodule update --init 

32) git submodule update --init --recursive

33) git init empty_repo 

34) git remote -v 

35) git checkout -

36) git checkout -b "new_branch"

37) git commit -m --allow-empty "No-ops commit"

38) git diff --staged 

39) git config feature.manyFiles 1

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git push --force origin/main 

43) git push -4 

44) git pull -4 

45) git push --set-upstream origin/main

46) git tag -l 

47) git show

48) time git status 

49) git ammend commithash

50) git rm submodule_name/

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                                  git commands practice

1) git add -A 

2) git commit -a -m "First commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash

6) git reflog 

7) git log -S "changed text"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop

13) git branch -vv

14) git bracnh -vv | awk '/: gone]/{print$1}'

15) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git remote -v1

22) git init empty_repo 

23) git rebase -i origin/main 

24) git rebase --continue

25) git rebase --abort 

26) git rebase -i root 

27) git grep -i -n "Keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\) -- "*.py"

30) git config --global help.autocorrect 1

31) git config --global help.autocorrect 0

32) git submodule add url

33) git clone empty empty_clone --recursive 

34) git submodule update --init 

35) git submodule update --init --recursive 

36) git rm submoudle_name/

37) git checkout -

38) git checkout -b "new_branch"

39) git rev-list --count main 

40) git diff --staged 

41) git show 

42) time git status 

43) git config feature.manyFiles 1

44) git commit -m --allow-empty "No-ops commit"

45) git push --force origin/main 

46) git push --set-upstream origin/main 

47) git push -4 

48) git pull -4 

49) git tag -l 

50) git ammend commithash

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                                                 git commands practice 

1) git add -A 

2) git commit -a -m "First commit of the day"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "changed text"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git branch -vv 

17) git branch -vv | '/: gone]/{print$1}'

18) git branch -vv | '/: gone]/{print$1}' | xargs git branch -d 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root

28) git rev-list --count main 

29) git submodule add url 

30) git clone empty empty-clone2 --recursive 

31) git submodule update --init 

32) git submodule update --init --recursive 

33) git rm submodule_name/

34) git push --force origin/main 

35) git push --set-upstream origin/main 

36) git push -4 

37) git pull -4 

38) git commit -m --allow-empty "No-ops commit"

39) git diff --staged 

40) git remote -v 

41) git init empty_repo 

42) git ammend commithash

43) git tag -l 

44) git config --global help.autocorrect 1

45) git config --global help.autocorrect 0 

46) git config feature.manyFiles 1

47) time git status 

48) git checkout -b "new_branch"

49) git checkout - 

50) git show 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

                                            git commands practice 

1) git add -A 

2) git commit -a -m "First commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d

12) git stash save "saved to stash"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key_word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git submodule add url 

29) git clone empty empty-clone --recursive 

30) git submodule update --init 

31) git submodule update --init --recursive 

32) git rm submodule_name/ 

33) git checkout - 

34) git checkout -b "new_branch"

35) git push --force origin/main 

36) git push --set-upstream origin/main 

37) git push -4 

38) git pull -4 

39) git diff --staged 

40) git show 

41) time git status 

42) git config --global help.autocorrect 1

43) git config --global help.autocorrect 0

44) git config feature.manyFiles 1

45) git commit -m --allow-empty "No-ops commit"

46) git init empty_repo 

47) git remote -v 

48) git ammend commithash 

49) git rev-list --count main 

50) git tag -l 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                    git commands practice 

1) git add -A 

2) git commit -a -m

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "changed text"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | '/: gone]/{print$1}'

11) git branch -vv | '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git checkout - 

22) git checkout -b "New_branch"

23) git rebase -i origin/main 

24) git rebase --continue 

25) git reabse --abort 

26) git rebase -i root 

27) git grep -i -n "kwyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\) -- "*.py"

30) git submodule add url 

31) git clone empty empty-clone2 --recursive 

32) git submodule update --init 

33) git submodule update --init --recursive 

34) git rm submodule_name/

35) git remote -v 

36) git init empty_repo 

37) git tag -l 

38) git show 

39) git diff --staged 

40) git commit -m --allow-empty "No-ops commit"

41) git push --force origin/main 

42) git push --set-upstream origin/main 

43) git pull -4 

44) git push -4 

45) time git status 

46) git config feature.manyFiles 1

47) git config --global help.autocorrect 1

48) git config --global help.autocorrect 0

49) git rev-list --count main 

50) git ammend commithash 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                               git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git remote update --prune 

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git reset --hard origin/main 

18) git branch -vv 

19) git branch -vv | awk '/: gone]/{print$1}'

20) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git submodule add url 

29) git clone empty empty-clone2 --recursive 

30) git submodule update --init 

31) git submodule update --init --recursive 

32) git rm submodule_name/

33) git checkout -b "new_branch"

34) git checkout -

35) git push --force origin/main 

36) git push --set-upstream origin/main 

37) git push -4 

38) git pull -4 

39) git commit -m --allow-empty "No-ops commit"

40) git rev-list --count main 

41) git diff --staged 

42) git show 

43) git config --global help.autocorrect 1

44) git config --global help.autocorrect 0

45) git config feature.manyFiles 1

46) time git status

47) git tag -l 

48) git remote -v 

49) git init empty_repo 

50) git ammend commithash 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                             
                                              git commands practice 

1) git add .

2) git commit -a -m "First commit of the day"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git reflog 

5) git revert head 

6) git revert commithash

7) git log -S "Chenged text"

8) git log --decorate --oneline --graph 

9) git remote update --prune 

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git branch -vv 

18) git branch -vv | awk '/: gone]/{print$1}'

19) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

20) git reset --hard origin/main 

21) git rev-list count main 

22) git rebase -i origin/main 

23) git rebase --continue 

24) git rebase --abort 

25) git rebase -i root 

26) git grep -i -n "keyword"

27) git grep -l -E main\(.+\)

28) git grep -L -E main\(.+\) -- "*.py"

29) git config --global help.autocorrect 1

30) git config --global help.autocorrect 0

31) git config feature.manyFiles 1

32) git submodule add url 

33) git clone empty empty-clone2 --recursive 

34) git submodule update --init 

35) git submodule update --init --recursive 

36) git rm submodule_name/

37) git commit -m --allow-empty "No-ops commit"

38) git diff --staged 

39) git show 

40) time git status 

41) git checkout - 

42) git checkout -b "new_branch"

43) git remote -v 

44) git init empty_repo 

45) git push --force origin/main 

46) git push --set-upstream origin/main 

47) git push -4 

48) git pull -4 

49) git tag -l 

50) git ammend commithash 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                               git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "Changed text"

5) git log --decorate --oneline --graph 

6) git branch -vv

7) git branch -vv | awk '/: gone]/{print$1}'

8) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

9) git rev-list --count main 

10) git stash save "Saved to stash"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git remote update --prune 

18) git reset --hard origin/main 

19) git reflog 

20) git revert head 

21) git revert commithash 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git checkout - 

30) git checkout -b "new_branch"

31) git submodule add url 

32) git clone empty empty_clone --recursive 

33) git submodule update --init 

34) git submodule update --init --recursive

35) git rm submodule_name/

36) git push --force origin/main 

37) git push --set-upstream origin/main 

38) git push -4 

39) git pull -4 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0 

42) git diff --staged 

43) git tag -l 

44) git remote -v 

45) git init empty_repo 

46) git show 

47) time git status 

48) git config feature.manyFiles 1 

49) git ammend commithash 

50) git commit -m --allow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                                  git commands practice 

1) git add -A 

2) git commit -a -m "first commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git remote update --prune 

8) git branch -vv 

9) git branch -vv | awk '/: gone]{print$1}'

10) git branch -vv | awk '/: gone]{print$1}' | xargs git brach -d 

11) git stash save "stash saved"

12) git stash apply stash{0}

13) git stash list 

14) git stash pop 

15) git bisect start 

16) git bisect good 

17) git bisect bad 

18) git rev-list --count main 

19) git --reset hard orign/main 

20) git log -S "changed text"

21) git log --decorte --oneline --gaph 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebse -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git checkout - 

30) git checkout -b "new_branch"

31) git push --set-upstream origin/main 

32) git push --force orign/main 

33) git submodule add url 

34) git clone empty empty_repo --recursive 

35) git submodule update --init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git tag -l 

39) git show 

40) time git status 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) git push -4

45) git pull -4 

46) git commit -m --allow-empty "No-ops commit"

47) git remote -v 

48) git init empty_repo 

49) git ammend commithash 

50) git diff --staged 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                                     git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Changed text"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git --reset hard origin/main 

21) git rev-list --count main 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git checkout - 

30) git checkout -b "new_branch"

31) git commit -m --allow-empty "No-ops commit"

32) git push --force origin/main 

33) git push --set-upstream 

34) git push -4 

35) git pull -4 

36) git submodule add url 

37) git clone empty empty-clone2 --recursive 

38) git submodule update --init 

39) git submodule update --init --recursive 

40) git rm submodule_name/

41) git diff --staged 

42) git remote -v 

43) git init empty_repo 

44) git config --global help.autocorrect 1

45) git config --global help.autocorrect 0 

46) git config feature.manyFiles 1

47) git show 

48) time git status 

49) git ammend commithash

50) git tag -l 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                                       git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | git branch -d 

12) git stash save "Stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git rev-list count --main 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git submodule add url 

30) git clone mepty empty_clone --recursive 

31) git submodule update --init 

32) git submodule update --init --recursive 

33) git rm submodule_name/ 

34) git push --force origin/main  

35) git push --set-upstream origin/main 

36) git push -4 

37) git pull -4 

38) git diff --staged 

39) git tag -l 

40) git remote -v 

41) git checkout - 

42) git checkout -b "nw_branch"

43) git show

44) time git status 

45) git config feature.manyFiles 

46) git config --global help.autocorrect 1

47) git config --global help.autocorrect 0

48) git ammend commithash

49) git commit -m --allow-empty "No-ops commit"

50) git init empty_repo 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

                                                      git commands practice 


1) git add .

2) git commit -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]/{print$1}'

11) git branch -vv | awk '/: gone]/{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git push --force origin/main

22) git push --set-upstream origin/main 

23) git push -4 

24) git pull -4 

25) git grep -i -n "Key-word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git rebase -i origin/main 

29) git rebase --continue 

30) git rebase --abort 

31) git rebase -i root

32) git rev-list --count main 

33) git checkout - 

34) git checkout -b "New_branch"

35) git submodule add url

36) git clone empty empty_clone --recursive

37) git submodule update --init 

38) git submodule update --init --recursive 

39) git rm submodule_name/

40) git diff --staged 

41) time git status 

42) git show 

43) git config --global help.autocorrect 1

44) git config --global help.autocorrect 0

45) git config feature.manyFiles 1

46) git tag -l 

47) git remote -v 

48) git init empty_repo 

49) git ammend commithash

50) git commit -m --alllow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                                  git commands pracitce

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git remote update --prune 

13) git stash save "Stash saved"

14) git stash apply stash{0}

15) git stash list 

16) git stash pop 

17) git bisect start 

18) git bisect good 

19) git bisect bad 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git rebase -i origin/main 

23) git rebase --continue 

24) git rebase --abort 

25) git rebase -i root 

26) git grep -i -n "keyword"

27) git grep -l -E main\(.+\)

28) git grep -L -E main\(.+\) -- "*.py"

29) git checkout -

30) git checkout -b "new_branch"

31) git submodule add url 

32) git clone empty empty-clone2 --recursive 

33) git submdule update --init 

34) git submodule updat --init --recursive 

35) git rm submodule_name/

36) git remote -v 

37) git init empty_repo 

38) git diff --staged 

39) git tag -l 

40) time git status 

41) git show 

42) git push --force origin/main 

43) git push --set-ustream origin/main 

44) git push -4 

45) git pull -4 

46) git ammend commithash 

47) git commit -m --allow-empty "No-ops commit"

48) git config --global help.autocorrect 1

49) git config --global help.autocorrect 0

50) git config feature.manyFiles 1

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                                    git commands practice 

1) git add -A 

2) git commit -a -m "First commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git branch -vv 

17) git branch -vv | awk '/: gone]{print$1}'

18) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

19) git reset --hard origin/main 

20) git remote update --prune 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key_word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4 

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git init empty_repo 

40) git remote -v 

41) git diff --staged 

42) git ammend commithash 

43) git config --global help.autocorrect 1

44) git config --global help.autocorrect 0

45) git config feature.manyFiles 1

46) git commit -m --allow-empty "No-ops commit"

47) git rev-list --count main 

48) git tag -l 

49) time git status 

50) git show 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                                  git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk ':/ gone]{print$1}'

9) git barnch -vv | awk ':/ gone]{print$1}' | xargs git branch -d 

10) git remote update --prune 

11) git stash save "stash saved"

12) git stash apply stash{0}

13) git stash list 

14) git stash pop 

15) git bisect start 

16) git bisect good 

17) git bisect bad

18) git reset --hard origin/main 

19) git log -S "text changed"

20) git log --decorate --online --graph 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "Key_word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty empty-clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/ 

39) git diff --staged

40) git tag -l 

41) git rev-list --count main 

42) git ammend commithash 

43) git config --global help.autocorrect 1

44) git config --global help.autocorrect 0

45) git config feature.manyFiles 1

46) git show 

47) time git status 

48) git commit -m --allow-empty "No-ops commit"

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                       git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -a -m"

4) git revert head 

5) git revert commithead 

6) git reflog 

7) git log -s "Text changed"

8) git log --decorate --oneline --graph 

9) git remote update --prune 

10) git branch -vv 

11) git branch -vv | awk '/: gone]{print$1}'

12) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

13) git stash save "stash saved"

14) git stash apply stash{0}

15) git stash list 

16) git stash pop 

17) git bisect start 

18) git bisect good 

19) git bisect bad 

20) git rev-list --count main 

21) git reset --hard origin/main 

22) git rebase -i origin/main 

23) git rebase --continue 

24) git rebase --abort 

25) git rebase -i root 

26) git grep -i -n "key_word"

27) git grep -l -E main\(.+\)

28) git grep -L -E main\(.+\) -- "*.py"

29) git checkout - 

30) git checkout -b "new_branch"

31) git push --force origin/main 

32) git push --set-upstream origin/main 

33) git push -4 

34) git pull -4 

35) git submoduele add url 

36) git clone empty empty_clone2 --recursive 

37) git submodule update --init --recursive 

38) git commit -m --allow-empty "No-ops commit"

39) git diff --staged 

40) git show 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git tag -l 

46) git submoudle update --init 

47) git rm submodule_name/

48) git init empty_repo 

49) git remote -v 

50) git ammend commithash 

51) git worktree add 

52) git worktree remove 

53) git worktree list 


                                     git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git reset --hard origin/main 

18) git remote update --prune 

19) git config help.autocorrect 1

20) git config help.autocorrect 0

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git submodule add url 

29) git clone empty empty_clone2 --recursive 

30) git submodule update --init 

31) git submodule update --init --recursive 

32) git rm submodule_name 

33) git checkout - 

34) git checkout -b "New_branch"

35) git push --force origin/main 

36) git push --set-upstream origin/main 

37) git push -4

38) git pull -4 

39) git diff --staged 

40) git show 

41) time git status 

42) git config feature.manyFiles 1

43) git tag -l 

44) git rev-list --count main 

45) git ammend commithash 

46) git commit -m --allow-empty "No-ops commit"

47) git log --decorate --oneline --graph 

48) git log -S "Text Changed"

49) git remote -v

50) git init empty_repo 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                  git commands practice 

1) git add -A 

2) git commit -a -m "new commit"

3) git revert head 

4) git revert commithash 

5) git reflog 

6) git remote update --prune 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git reset --hard origin/main 

18) git log --decorate --oneline --graph 

19) git log -S "text changed"

20) git config --global alias.ac "!git add -A && git commit -a -m"

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key_word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git submodule add url 

29) git clone empty empty_clone2 --recursive 

30) git submodule update --init 

31) git submodule update --init --recursive 

32) git rm submodule_name/

33) git checkout -

34) git checkout -b "new_branch"

35) git config --global help.autocorrect 1

36) git config --global help.autocorrect 0

37) git config feature.manyFiles 1

38) time git status

39) git show 

40) git commit -m --allow-empty "no-ops commit"

41) git rev-list --count main 

42) git diff --staged 

43) git push --force origin/main 

44) git push --set-upstream origin/main 

45) git push -4 

46) git pull -4 

47) git ammend commithash 

48) git remote -v 

49) git init empty_repo

50) git tag -l 

51) git worktree add 

52) git worktree list 

53) git worktree remove 


                                               git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --graph --oneline 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git remote update --prune 

17) git reset --hard origin/main 

18) git revert head 

19) git revert commithash

20) git reflog 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key_word"

26) git grep  -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git checkout -

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git submodule add url 

32) git clone empty empty-clone2 --recursive 

33) git submodule update --init 

34) git submodule update --init --recursive 

35) git rm submodule_name/

36) git push -4 

37) git pull -4 

38) git commit -m --allow-empty "No-ops commit"

39) git rev-list --count main 

40) git diff --staged 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) git show 

45) time git status 

46) git tag -l 

47) git ammend commithash 

48) git remote -v 

49) git init empty_repo 

50) git push --set-upstream origin/main 

51) git worktree add 

52) git worktree list 

53) git worktree remove 


                                         git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "Text changed"

5) git log --decorate --oneline --graph 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git reset --hard origin/main 

17) git remote update --prune 

18) git config --global help.autocorrect 1

19) git config --global help.autocorrect 0

20) git revert head 

21) git revert commithash 

22) git reflog 

23) git grep -i n "keyword"

24) git grep -l -E main\(.+\)

25) git grep -L -E main\(.+\) -- "*.py"

26) git rebase -i origin/main 

27) git rebase --continue 

28) git rebase --abort 

29) git rebase -i root 

30) git rev-list --count main

31) git submodule add url 

32) git clone empty empty_clone --recursive 

33) git submodule update --init 

34) git submodule update --init --recursive 

35) git rm submodule_name/

36) git diff --staged 

37) git config feature.manyFiles 1

38) time git status 

39) git show 

40) git tag -l 

41) git checkout - 

42) git checkout -b "new_branch"

43) git commit -m --allow-empty "No-ops commit"

44) git push --force origin/main 

45) git push --set-upstream origin/main 

46) git push -4 

47) git pull -4 

48) git init empty_repo 

49) git remote -v 

50) git ammend commithash 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                                            git commands practice 


1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git config -m"

4) git branch -vv 

5) git branch -vv | awk '/: gone]{print$1}'

6) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

7) git log -S "Text changed"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git reset --hard origin/main 

17) git revert head 

18) git revert commithash 

19) git reflog 

20) git remote update --prune 

21) git rev-list --count main 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) --"*.py"

25) git rebase -i origin/main 

26) git rebase --continue

27) git rebase --abort 

28) git rebase -i root 

29) git push --force origin/main 

30) git push --set-upstream 

31) git push -4 

32) git pull -4 

33) git submodule add url 

34) git clone empty empty_clone2 --recursive 

35) git submodule update --init 

36) git submodule update --init --recusrsive 

37) git rm submodule_name/

38) git diff --staged 

39) git config feature.manyFiles 1

40) time git status

41) git show 

42) git tag -l 

43) git remote -v 

44) git init empty_repo 

45) git ammend commithash 

46) git commit -m --allow-empty "No-ops commit"

47) git checkout - 

48) git checkout -b "new_branch"

49) git config --global help.autocorrect 1

50) git config --global help.autocorrect 0 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

                          git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git grep -i -n "key word"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git push --force origin/main 

30) git push --set-upstream origin/main 

31) git submodule add url 

32) git clone empty empty_clone2 --recursive 

33) git submodule update --init 

34) git submodule update --init --recursive 

35) git rm submodule_name/

36) git diif --staged 

37) git push -4 

38) git pull -4 

39) git config feature.manyFiles 1

40) time git status 

41) git show 

42) git tag -l 

43) git checkout - 

44) git checkout -b "new_branch"

45) git config --global help.autocorrect 1

46) git config --global help.autocorrect 0

47) git ammend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree list 

53) git worktree remove 


                                      git commands practice 

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git push --force origin/main 

22) git push --set-upstream origin/main 

23) git push -4 

24) git pull -4 

25) git checkout - 

26) git checkout -b "new_branch"

27) git grep -i -n "keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\) -- "*.py"

30) git rebase -i origin/main 

31) git rebase --continue 

32) git rebase --abort 

33) git rebase -i root 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git rev-list --count main 

40) git diff --staged 

41) git tag -l 

42) git show 

43) git config fearture.manyFiles 1

44) git config --global help.autocorrect 1

45) git config --global help.autocorrect 0

46) time git status 

47) git ammend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git init empty_repo 

50) git remote -v 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

                                    git commands practice 

1) git add -A

2) git commit -a -m "New commit" 

3) git config --global alias.ac "!git add -A && igit commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text changed"

8) git remote update --prune 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "Stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git log --decorate --oneline --graph

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i origin/main 

25) git grep -i -n "keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4 

31) git pull -4 

32) git commit -m --allow-empty "No-ops commit"

33) git submodule add url 

34) git clone empty empty_clone2 --recursive 

35) git submodule update --init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git diff --staged 

39) git config --global help.autocorrect 1

40) git config --global help.autocorrect 0

41) git show 

42) git tag -l 

43) git config feature.manyFiles 1

44) time git status 

45) git init empty_repo 

46) git remote -v 

47) git rev-list --count main 

48) git ammend commithash 

49) git checkout - 

50) git checkout -b "New-Branch"

51) git worktree add 

52) git worktree list 

53) git worktree remove 

                new-command

54) git show first-parent 


                                            git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "changed text"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push --force origin/main 

29) git push --set-updtream origin/main 

30) git push -4 

31) git pull - 4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty empty-clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) git rev-list --count main 

44) time git status 

45) git show 

46) git tag -l 

47) git ammend commithash 

48) git init empty_repo 

49) git remote -v 

50) git config -m --allow-empty "No-ops commit"

new commands 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

                                        
                                        git commands pracitce 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gont]{print$1}' | xargs git branch -d 

10) git remote update --prune 

11) git stash save "stash saved"

12) git stash apply stash{0}

13) git stash list 

14) git stash pop 

15) git bisect start 

16) git bisect good 

17) git bisect bad 

18) git reset --hard origin/main 

19) git log -S "text changed"

20) git log --decorate --oneline --graph 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git push --force origin/main 

29) git push -4 

30) git push --set-upstream origin/main 

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty empty_clone2 --init 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git rev-list --count main 

40) git diff --staged 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git tag -l 

47) git ammend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 


                                          git commands practice 

1) git add .

2) git commit -a -m 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --graph --oneline 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git bisect start 

13) git bisect good 

14) git bisect bad 

15) git stash save "stash saved"

16) git stash apply stash{0}

17) git stash list 

18) git stash pop 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git checkout - 

30) git checkout -b "new_branch"

31) git push -- force origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty-clone2 --recursive 

36) git sublodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git tag -l 

41) git show 

42) git config --global help.autocorrect 1

43) git config --global help.autocorrect 0

44) git config feature.manyFiles 1

45) time git status 

46) git ammend commithash 

47) git commit -m --allw-empty "No-ops commit"

48) git remote -v 

49) git init empty_repo 

50) git push --set-upstream origin/main 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

                                     
                                     git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git bisect start 

13) git bisect good 

14) git bisect bad 

15) git rev-list --count main 

16) git stash save "stash saved"

17) git stash apply stash{0}

18) git stash list 

19) git stash pop 

20) git remote update --prune 

21) git grep -i -n "key-word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push -4 

32) git pull -4 

33) git push --set-upstream origin/main 

34) git submodule add url 

35) git clone empty empty-clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -l 

46) git ammend commithash 

47) git commit -m --allow-empty "No-ops commit"

48) git remote -v 

49) git init empty_repo

50) git reset --hard origin/main 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent


                                             git commands practice 

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Changed text"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good

15) git bisect bad 

16) git remote update --prune 

17) git reset --hard origin/main 

18) git branch -vv 

19) git branch -vv | awk '/: gone]{print$1}

20) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

21) git checkout - 

22) git checkout -b "new_branch"

23) git grep -i -n origin/main 

24) git grep -l -E main\(.+\)

25) git grep -L -E main\(.+\) -- "*.py"

26) git rebase -i origin/main 

27) git rebase --continue 

28) git rebase --abort 

29) git rebase -i root 

30) git push --set-upstream origin/main 

31) git push --force origin/main

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone epmty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -l 

46) git commit -m --allow-empty "No-ops commit"

47) git ammend commithash 

48) git rev-list --count main 

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 


                                        git commands practice 

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text-changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git checkout - 

22) git checkout -b "new_branch"

23) git push --force origin/main 

24) git push --set-upstream origin/main 

25) git push -4 

26) git pull -4 

27) git grep -i -n "keyword"

28) git grep -l -E main\(.+\)

29) git grep -L -E main\(.+\) -- "*.py"

30) git rebase -i origin/main 

31) git rebase --continue 

32) git rebase --abort 

33) git rebase -i root 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git config --global help.autocorrect 1

40) git config --global help.autocorrect 0

41) git config feature.manyFiles 1

42) time git status 

43) git show 

44) git tag -l 

45) git diff --staged 

46) git remote -v 

47) git init empty_repo 

48) git ammend commithash 

49) git rev-list --count main 

50) git commit -m --allow-empty "No-ops commit"

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 


                                     git commands practice 

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git revert head 

7) git revert commithash 

8) git reflog 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git checkout -

22) git checkout -b "new_branch"

23) git push --force origin/main 

24) git push --set-upstream origin/main 

25) git grep -i -n "keyword"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push -4 

29) git pull -4 

30) git rebase -i origin/main 

31) git rebase --continue 

32) git rebase --abort 

33) git rebase -i root 

34) git submoule add url 

35) git clone empty empty-clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git commit -m --allow-empty "No-ops commit"

41) git ammend commithash 

42) git show 

43) git config --global help.autocorrect 1

44) git config --global help.autocorrect 0

45) git config feature.manyFiles 1

46) git rev-list --count main 

47) time git status 

48) git init empty_repo

49) git tag -l 

50) git remote -v 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 


                                                  git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git revert head 

10) git revert commithash 

11) git reflog 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git reset --hard origin/main 

20) git remote update --prune 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git checkout - 

29) git checkout -b "New_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git commit -m --allow-empty "No-ops commit"

35) git submodules add url 

36) git clone empty empty_clone2 --recursive 

37) git submodule update --init 

38) git submodule update --init --recursive 

39) git rm submodule_name/

40) git diff --staged 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git tag -l 

47) git ammend commithash 

48) git rev-list --count main 

49) git init empty_repo 

50) git remote -v 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 


                                  git commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git remote update --prune 

10) git branch -vv 

11) git branch -vv | awk '/: gone]{print$1}'

12) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

13) git stash save "stash saved"

14) git stash apply stash{0}

15) git stash list 

16) git stash pop 

17) git bisect start 

18) git bisect good 

19) git bisect bad 

20) git reset --hard origin/main 

21) git rebase -i origin/main 

22) git rebase --continue 

23) git rebase --abort 

24) git rebase -i root 

25) git grep -i -n "key word"

26) git grep -l -E main\(.+\)

27) git grep -L -E main\(.+\) -- "*.py"

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4 

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submdoule add url 

35) git clone empty empty-clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -l 

46) git remote -v 

47) git init empty_repo 

48) git rev-list --count main 

49) git ammend commithash 

50) git commit -m --allow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

                                                              git commands practice 


1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert coommithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git  stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git push --set-upstream origin/main

29) git push --force origin/main

30) git push -4

31) git pull -4 

32) git submoduel add url 

33) git clone empty empty_clone2 --recursive 

34) git submodule update --init 

35) git submodule update --init --recursive 

36) git rm submodule_name/

37) git checkout - 

38) git checkout -b "new_branch"

39) git diff --staged

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status

44) git show 

45) git tag -l 

46) git ammend commithash

47) git commit -m --allow-empty "No-ops commit"

48) git remote -v

49) git init empty_repo

50) git rev-list --count main

51) git worktree add

52) git worktree remove 

53) git worktree list 

54) git show first-parent

                                                       git commands practice

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

10) git log -S "text changed"

11) git log --decorate --oneline --graph 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad

19) git remote update --prune

20) git reset --hard origin/main

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue 

26) git rebase --abort

27) git rebase -i root

28) git checkout - 

29) git checlout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main

32) git push -4

33) git pull -4

34) git submodules add url

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule/name

39) git diff --staged

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show

45) git tag -l

46) git remote -v

47) git init empty_repo

48) git ammend commithash

49) git config -m --allow-empty "No-ops commit"

50) git rev-list --count main

51) git worktree add

52) git worktree remove

53) git worktree list

54) git show first-parent

55) git config --global core.symlinks true

56) git rm -r --cached submodule_name/folder(submodule_name)



                                                       git commands practice

1) git add -A 

2) git commit -a -m "new commit"

3) git config alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash

6) git reflog

7) git branch -vv

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -daily

10) git log -S "text changed"

11) git log --decorate --oneline --graph 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start

17) git bisect good

18) git bisect bad

19) git remote update --prune

20) git reset --hard origin/main

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue

26) git rebase --abort 

27) git rebase -i root

28) git push --force origin/main

29) git push --set-upstream origin/main

30) git push -4 

31) git checkout -

32) git checkout -b "new_branch"

33) git submodule add url

34) git clone empty empty_clone2 --recursive 

35) git update --init 

36) git update --init --recursive 

37) git rm submodule_name/

38) git diff --staged

39) git config --global help.autocorrect 1

40) git config --global help.autocorrect 0

41) git config feature.manyFiles 1

42) time git status

43) git show 

44) git tag -L

45) git remote -v1

46) git init empty_repo

47) git ammend commithash

48) git commit -m --allow-empty "No-ops commit"

49) git rev-list --count main

50) git pull -4 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git rm -r --cached submodule/folder

57) git -c core.symlinks=true clone --recurse-submodules url 


                                         
                                           git commands practice


1) git add -A

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash

6) git reflog 

7) git log -S "text chenaged"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop

13) git bisect start 

14) git bisect good 

15) git bisect bad

16) git remote update --prune 

17) git reset --hard origin/main

18) git branch -vv 

19) git branch -vv | awk '/: gone]{print$1}'

20) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout -

29) git checkout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git tag -L 

41) git rev-list --count main 

42) git config --global help.autocorrect 1

43) git config --global help.autocorrect 0

44) git config feature.manyFiles 1

45) time git status 

46) git show 

47) git ammend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder 

56) git config --global core.symlink true 

57) git -c core.symlinks=true clone --recurse-submodules url


                                                                             git commands practice 

1) git add -A 

2) git commit -a -m "key word"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git remote update --prune 

17) git reset --hard origin/main 

18) git revert head 

19) git revert commithash 

20) git reflog 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git push -4 

29) git push --force origin/main 

30) git push --set-upstream origin/main 

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add 

35) git clone empty emptyClone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -L

46) git remote -v 

47) git init empty_repo 

48) git rev-list --count main 

49) git ammend commithash 

50) git commit -m --allow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git config --global core.symlinks true

56) git rm -r --cached submodule_name/folder

57) git -c core.symlinks=true clone --recurse-submodules url



                                                                             git commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | args '/: gone]{print$1}'

9) git branch -vv | args '/: gone]{print$1}' | xargs git branch -d 

10) git bisect start 

11) git bisect good 

12) git bisect bad 

13) git stash save "stash saved"

14) git stash apply stash{0}

15) git stash list 

16) git stash pop 

17) git remote update --prune 

18) git reset --hard origin/main 

19) git log -S "text changed"

20) git log --decorate --oneline --graph 

21) git grep -i -n "keyword"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4 

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty empty_clone --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) git rev-list --count main 

44) git commit -m --allow-empty "No-ops commit"

45) git show 

46) time git status 

47) git remote -v 

48) git init empty_repo 

49) git ammend commithash 

50) git tag -L

51) git worktree add

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git rm -r --cached submodule/folder

57) git -c core.symlinks=true clone --recurse-submodules url

                                                                      git commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -a -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk ': gone]{print$1}'

9) git branch -vv | awk ': gone]{print$1}' | xargs git branch -d 

10) git bisect start 

11) git bisect good 

12) git bisect bad 

13) git stash save "stash saved"

14) git stash apply stash{0}

15) git stash list 

16) git stash pop 

17) git remote update --prune 

18) git reset --hard origin/main 

19) git log -S "text changed"

20) git log --decorate --oneline --graph 

21) git grep -i -n "key word"

22) git grep -l -E main(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git push -4

31) git pull -4 

32) git checkout - 

33) git checkout -b "new_branch"

34) git submodule add url 

35) git clone empty emtpy_repo --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git ammend commithash 

41) git commit -m --allow-empty "No-ops commit"

42) git remote -v 

43) git init empty_repo 

44) git config --global help.autocoreect 1

45) git config --global help.autocorrect 0

46) git config feature.manyFiles 1

47) time git status 

48) git show 

49) git tag -L 

50) git rev-list --count main 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent

55) git config --global core.symlinks true

56) git -c core.symlinks=true clone --recurse-submodules url


                                                       
                                                        git commands practice 

1) git add -A 

2) git config -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "Text Changed"

8) git log --decorate --oneline --graph 

9) git bisect start 

10) git bisect good 

11) git bisect bad 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git branch -vv 

17) git branch -vv | awk '/: gone]{print$1}'

18) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

19) git remote update --prune 

20) git reset --hard origin 

21) git rev-list count --main 

22) git grep -i -n "Key word"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git checkout - 

30) git checkout -b "new_branch"

31) git push --force origin/main 

32) git push --set-upstream origin/main 

33) git push -4 

34) git pull -4 

35) git submodule add url 

36) git clone empty empty_clone2 --recursive 

37) git submodule clone --init 

38) git submodule clone --init -recursive 

39) git rm submodule_name/

40) git diff --staged 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0 

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git tag -l 

47) git commit -m --allow-empty "No-ops commit"

48) git ammend commithash 

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder 

56) git config --global core.symlinks true 

57) git -c core.symlinks=true clone --recurse-submodules url



                                                                git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash 

5) git revert head 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

10) git stash save "Stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash apply 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git remote update --prune 

18) git reset --hard origin/main 

19) git log -S "Text changed"

20) git log --decorate --oneline --graph 

21) git grep -i -n "keyword"

22) git grep -l -E main(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_repo --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged 

40) git rev-list --count main 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0 

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git tag -L 

47) git remote -v 

48) git init empty_repo 

49) git amend commithash 

50) git commit -m --allow-empty "No-ops commit"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git rm -r --cached submodule_name/folder

57) git -c core.symlinks=true clone --recurse-submodules url 



                                                                       git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -a -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git branch -vv 

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good 

16) git bisect bad 

17) git remote update --prune 

18) git reset --hard origin/main 

19) git log -S "text changed"

20) git log --decorate --oneline --graph 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\) 

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i oriign/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin main 

31) git push --set-upstream origin main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_repo --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git tag -l 

45) git show

46) git remote -v 

47) git init empty_repo 

48) git commit -m --allow-empty "No-ops commit"

49) git amend commithash

50) git rev-list --count main 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder 

56) git config --global core.symlinks true 

57) git -c core.symlinks=true clone --recurse-submodules url

                    
                                                  git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git branch -vv 

5) git branch -vv | awk '/: gone]{print$1}'

6) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git revert commithash 

17) git revert head 

18) git reflog 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git rev-list --count main 

22) git grep -i -n "keyword"

23) git grep -l -E main\(.+\)

24) git grep -L -E main\(.+\) -- "*.py"

25) git rebase -i origin/main 

26) git rebase --continue 

27) git rebase --abort 

28) git rebase -i root 

29) git push --force origin main 

30) git push --set-upstream origin main 

31) git push -4 

32) git pull -4 

33) git submodule add url 

34) git clone empty empty_clone2 --recursive 

35) git submodule update --init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git diff --staged 

39) git config --global help.autocorrect 1 

40) git config --global help.autocorrect 0 

41) git config feature.manyFiels 1

42) time git status 

43) git tag -l 

44) git show 

45) git remote -v 

46) git init empty_repo 

47) git amend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git checkout - 

50) git checkout -b "new_branch"

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent

55) git config --global core.symlinks true 

56) git -c core.symlinks=true clone --recurse-submodule url 

57) git rm -r --cached submodule_name/folder


                                             git commands practice 

1) git add -A 

2) git commit -a -m

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash 

6) git reflog 

7) git log -s "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{prtin$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune

20) git reset --hard origin/main

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebasse -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git push -4 

28) git push --force origin/main 

29) git push --set-upstream origin/main 

30) git pull -4 

31) git checkout - 

32) git checkout -b "new_branch"

33) git submodule add url 

34) git clone empty empty_repo --recursive 

35) git submodule update --init 

36) git submodule update --init --recursive 

37) git rm submodule_name/

38) git diff --staged 

39) git rev-list --count main 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0 

42) git feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -l

46) git remote -v 

47) git init empty_repo

48) git commit -m --allow-empty "No-ops commit"

49) git amend commithash 

50) git rebase -i root

51) git worktree add

52) git worktree remove 

53) git wroktree list 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git rm -r --cached submodules_folder/folder



                                                                           git commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac  "!git add -A && git commit -a -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git revert head 

10) git revert commithash 

11) git reflog 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word'

22) git grep -l -E main\(.+)

23) git grep -L -E main\(.+) -- "*.py"

24) git rebase -i origin/main 

25) git rease --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git rev-list --count main 

40) git diff --staged 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git remote -v 

47) git init empty_repo 

48) git amend commithash 

49) git commit -m --allow-empty "No-ops commit"

50) git tag -l 

51) git worktree add

52) git worktree remove 

53) git worktree list 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder

56) git config --global core.symlinsk true

57) git -c core.symlinks=true clone --recurse-submodules url


                                                                        git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git revert head 

7) git revert commithash 

8) git reflog 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs branch -d 

12) git stast save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main  

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue

26) git rebase --abort 

27) git rebase -i root 

28) git push --force origin/main 

29) git push --set-upstream origin/main

30) git push -4 

31) git pull -4 

32) git submodule add url 

33) git clone empty empty_clone2 --recursive 

34) git submodule update --init 

35) git submodule update --init --recursive 

36) git rm submodule_name/

37) git checkout - 

38) git chekcout -b "new_branch"

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git tag -l 

45) git remote -v 

46) git init empty_repo 

47) git commit -m --allow-empty "No-ops commit"

48) git amend commithash

49) git rev-list --count main 

50) git show 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git rm -r --cached submodule_name/folder



                                                        git commands practice

1) git add -A 

2) git config --global alias.ac "!git add -A && git commit -m"

3) git log -S "text changed"

4) git log --decorate --oneline -graph 

5) git revert head 

6) git revert commithash 

7) git reflog 

8) git branch -vv 

9) git branch -vv | awk '/:gone]{print$1}'

10) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

11) git stash save "stash saved"

12) git stash apply stash{0}

13) git stash list 

14) git stash pop 

15) git bisect start 

16) git bisect good 

17) git bisect bad 

18) git remote update --prune 

19) git reset --hard origin/main 

20) git commit -a -m "New commit"

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase --abort 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git update empty empty_repo --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name 

39) git diff --staged 

40) git rev-list --count main 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0 

43) git config feature.manyFiles 1

44) time git status 

45) git show 

46) git init empty_repo 

47) git remote -v 

48) git commit -m --allow-empty "No-ops commit"

49) git amend commithash 

50) git tag -l 

51) git worktree add 

52) git worktree rmove 

53) git worktree list 

54) git show first-parent 

55) git rm -r --cached submodue_name/folder 

56) git config --global core.symlinks true 

57) git -c core.symlinks=true clone --recurse-submodules url 



                                                     git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git barnch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status 

44) git show 

45) git tag -l 

46) git rev-list --count main 

47) git amend commithash 

48) git commit -m --allow-empty "No-ops commmit"

49) git remote -v 

50) git init empty_repo 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git config --global core.symlinks true 



                                                   git commands practice 


1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git bisect start 

8) git bisect good 

9) git bisect bad

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git log -s "text changed"

15) git log --decorate --oneline -graph 

16) git branch -vv 

17) git branch -vv | awk '/: gone]{print$1}'

18) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

19) git remote update --prune 

20) git reset --hard origin/main

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push -4 

32) git push --seet-upstream origin/main 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged 

40) git config --global halp.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) git rev-list --count main

44) git commit -m --allow-empty "No-ops commit"

45) git amend commithash 

46) git show 

47) time git status 

48) git remote -v 

49) git init empty_repo 

50) git tag -L 

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show firt-parent 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git rm -r --cached submodule_name/folder 



                                                                 git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git branch -vv 

7) git branch -vv | awk '/: gone]{print$1}'

8) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

9) git stash save "stash saved"

10) git stash apply stash{0}

11) git stash list 

12) git stash pop 

13) git bisect start 

14) git bisect good 

15) git bisect bad 

16) git revert commithash 

17) git revert head 

18) git reflog 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) git rev-list --count main 

44) git remote -v1

45) git init empty_repo

46) git amend commithash

47) git commit -m --allow-empty "No-ops commit"

48) git tag -L

49) time git status

50) git show

51) git worktree add

52) git worktree remove

53) git worktree list

54) git show first-parent

55) git config --global core.symlinks true

56) git -c core.symlinks=true clone --recurse-submodules clone url

57) git rm -r --cahced submodule_name/folder


                                                          git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list

15) git stash pop 

16) git bisect start

17) git bisect good 

18) git bisect bad

19) git remote update --prune

20) git reset --hard origin/main

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) --"*.py"

24) git rebase -i origin/main 

25) git rebase --continue

26) git rebase --abort

27) git rebase -i root

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty empty_clone2 --recursive

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule/

39) git diff --staged

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1

43) time git status

44) git show 

45) git tag -l

46) git rev-list --count main

47) git remote -v 

48) git init empty_repo

49) git commit -m --allow-empty "No-ops commit"

50) git amend commithash

51) git worktree add

52) git worktree remove

53) git worktree list 

54) git show first-parent

55) git config --global core.symlinks true

56) git -c core.symlinks clone --recurse-submodules url

57) git rm -r --cached submoduel_name/folder


                                         git commands practice

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git ad -A && git commit -m"

4) git revert commithash

5) git revert head

6) git reflog

7) git branch -vv

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

10) git log -S "text changed"

11) git log --decorate --oneline --graph

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good

18) git bisect bad

19) git remote update --prune

20) git reset --hard origin/main 

21) git grep -i -n "key_word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue 

26) git rebase --abort

27) git rebase -i root

28) git checkout -

29) git checkout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main 

32) git push -4

33) git pull -4

34) git submodules add url

35) git clone empty empty_clone2 --recursive

36) git submodule update --init

37) git submodule update --init --recursive

38) git rem submodule_name/

39) git diff --staged

40) git show 

41) git tag -L

42) git config --global help.autocorrect 1

43) git config --global help.autocorrect 0

44) git config feature.manyFiles 1

45) time git status

46) git rev-list --count main

47) git amend commithash

48) git config -m --allow-empty "No-ops commit"

49) git remote -v

50) git init empty_repo

51) git commit --amend

52) git worktree add 

53) git worktree remove

54) git worktree list 

55) git show first-parent

56) git rm -r --cached submoduel_name/folder

57) git config --global core.symlinks true

58) git -c core.symlinks=true clone --recurse-submodules url


                                     git commands practice

1) git add -A

2) git config --global alias.ac "!git add -A && git commit -m"

3) git commit -a -m "New commit"

4) git revert head

5) git revert commithash

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git branch -vv

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xarga git branch -d

12) git stash save "stash saved"

13) git stash list 

14) git stash apply stash{0}

15) git stash pop

16) git bisect start

17) git bisect good

18) git bisect bad

19) git reset --hard origin/main

20) git remote update --prune 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root

28) git checkout -

29) git checkout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty empty_clone2 --recursive

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged 

40) git show 

41) git tag -l 

42) git config --global help.autocorrect 1

43) git config --global help.autocorrect 0

44) git config feature.manyFiles 1

45) time git status 

46) git amend commithash

47) git commit --allow-empty -m "No-ops commit"

48) git remote -v

49) git init empty_repo

50) git rev-list --count main

51) git worktree add 

52) git worktree remove 

53) git worktree list 

54) git show first-parent

55) git rm -r --cached submodule_name/folder

56) git config --global core.symlinks true

57) git -c core.symlinks=true clone --recurse-submodules url

58) git commit --amend 


                                                            git commands practice

1) git add -A 

2) git commit -a -m "new_commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git branch -vv

5) git branch -vv | awk '/: gone]{print$1}'

6) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git stash save "stash saved" 

10) git stash apply stash{0}

11) git stash list 

12) git stash pop

13) git bisect start 

14) git bisect good

15) git bisect bad 

16) git revert head

17) git revert commithash

18) git reflog

19) git remote update --prune

20) git reset --hard origin/main 

21) git grep -i -n "key_word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "New_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty empty_clone2 --recursive

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged

40) git show 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status

45) git rev-list --count main

46) git tag -l 

47) git remote -v1

48) git init empty_repo

49) git commit --allow-empty -m "No-ops commit"

50) git amend commithash

51) git show first-parent

52) git worktree add 

53) git worktree list 

54) git worktree remove 

55) git config --global core.symlinks true

56) git -c core.symlinks=true clone --recursive-submosules url

57) git rm -r --cached submodule_name/folder

58) git commit --amend



                                                                        git commands practice

1) git add -A

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head

5) git revert commithash

6) git reflog

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git branch -vv

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop

16) git bisect start

17) git bisect good

18) git bisect bad

19) git remote update --prune

20) git reset --hard origin/main

21) git grep -i -n  "key_word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue

26) git rebase --abort

27) git rebase -i root

28) git checkout -

29) git checkout -b "new_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty emtpy_clone2 --recursive

36) git submodule update --init

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged

40) git rev-list --count main

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status

45) git show 

46) git tag -l

47) git remote -v

48) git init empty_repo

49) git amend commithash

50) git commit -m --allow-empty "No-ops commit"

51) git show first-parent

52) git worktree add

53) git worktree list 

54) git worktree remove

55) git rm -r --cached submodule_name/folder

56) git config --global core.symlinks true

57) git -c core.symlinks=true clone --recurse-submodules url

58) git commit --amend



                                                                            git commands practice


1) git add -A

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git branch -vv

5) git branch -vv | awk '/: gone]{print$1}'

6) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

7) git log -S "text changed"

8) git log --decorate --oneline --graph

9) git revert head

10) git revert commithash

11) git reflog

12) git remote update --prune

13) git reset --hard origin/main

14) git stash save "stash saved"

15) git stash apply stash{0}

16) git stash list 

17) git stash pop

18) git bisect start 

19) git bisect good 

20) git bisect bad 

21) git grep -i -n "Key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue

26) git rebase --abort

27) git rebase -i root

28) git checkout -

29) git checkout -b "New_branch"

30) git push --force origin/main

31) git push --set-upstream origin/main 

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty empty_repo --recursive

36) git submodule update --init

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged

40) git show 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config featrue.manyFiles 1

44) time git status 

45) git rev-list --count main

46) git tag -l

47) git commit --allow-empty -m "No-ops commit"

48) git remote -v

49) git init empty_repo

50) git amend commithash

51) git worktree add

52) git worktree list 

53) git worktree remove

54) git rm -r --cached submodule_name/folder

55) git -c core.symlinks=true clone --recurse-submodules url

56) git config --global core.symlinks true

57) git show first-parent



                                                                          git commands practice

1) git add -A 

2) git commit -a -m "new commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert commithash 

5) git revert head

6) git reflog

7) git branch -vv

8) git branch -vv | awk '/: gone]{print$1}'

9) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

10) git stash save "stash saved"

11) git stash apply stash{0}

12) git stash list 

13) git stash pop 

14) git bisect start 

15) git bisect good

16) git bisect bad

17) git log -S "text changed"

18) git log --decorate --oneline --graph 

19) git remote update --prune

20) git reset --hard origin/main

21) git checkout -

22) git checkout -b "new_branch"

23) git grep -i -n "key word"

24) git grep -l -E main\(.+\)

25) git grep -L -E main\(.+\) -- "*.py"

26) git rebase -i origin/main

27) git rebase --continue 

28) git rebase --abort

29) git rebase -i root

30) git push --force origin/main

31) git push --set-upstream origin/main

32) git push -4

33) git pull -4

34) git submodule add url

35) git clone empty empty_clone --recursive

36) git submodule update --init

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged

40) git show 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status

45) git tag -l

46) git remote -v

47) git init empty_repo

48) git rev-list --count main\

49) git amend commithash 

50) git commit -m --allow-empty "No-ops commit"

51) git show first-parent

52) git worktree add

53) git worktree list 

54) git worktree remove

55) git config --global core.symlinks true

56) git -c core.symlinks=true clone --recurse-submodules url

57) git rm -r --cached submoduel_name/folder

58) git commit --amend



                                                    git commands practice 

1) git add -A 

2) git commit -a -m 

3) git config --global alias.ac "!git add -A && git commit -m"

4) git log -S "text changed"

5) git log --decorate --oneline --graph 

6) git revert commithash

7) git revert head

8) git reflog 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update -prune

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodules add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0

42) git config feature.manyFiles 1 

43) time git status

44) git tag -l 

45) git remote -v 

46) git init empty_repo 

47) git amend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git show 

50) git rev-list --count main 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

55) git rm -r --cached submodule_name/folder 

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git config --global core.symlinks true 

58) git commit --amend



                                                   git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash apply stash{0}

14) git stash list 

15) git stash pop 

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) --"*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submodule_name/

39) git diff --staged 

40) git tag -L

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0 

43) git config feature.manyFiles 1 

44) time git status 

45) git remote -v 

46) git init empty_repo 

47) git amend commithash 

48) git commit -m --allow-empty "No-ops commit"

49) git rev-lsit --count main 

50) git show 

51) git show first-parent 

52) git wroktree add 

53) git worktree remove 

54) git worktree list 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true clone --recurse-submodules url 

57) git rm -r --cached submodule_name/folder 

58) git commit --amend



                                       git commands practice 


1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git bisect start 

13) git bisect good 

14) git bisect bad 

15) git stash save "stash saved"

16) git stash apply stash{0}

17) git stash list 

18) git stash pop 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) --"*/py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4

34) git diff --staged 

35) git submodule add url 

36) git clone empty empty_clone --reursive 

37) git submodule update --init 

38) git submodule update --init --recursive 

39) git rm submodule_name/

40) git show 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git tag -l 

46) git remote -v 

47) git init empty_repo 

48) git amend commithash 

49) git commit -m --allow-empty "No-ops commit"

50) git rev-list --count main 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true 

57) git rm -r --cached submodule_name/

58) git commit --amend 



                                                git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash list 

14) git stash pop 

15) git stash apply stash{0}

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main

25) git rebase --continue

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin/main 

31) git push --set-upstream origin/main 

32) git push -4 

33) git pull -4 

34) git submodule add url 

35) git clone empty empty_clone2 --recursive 

36) git submodule update --init 

37) git submodule update --init --recursive 

38) git rm submoudle_name/

39) git diff --staged 

40) git config --global help.autocorrect 1

41) git config --global help.autocorrect 0 

42) git config feature.manyFiles 1

43) time git status 

44) git tag -L 

45) git show 

46) git remote -v 

47) git inti empty_repo 

48) git ammend commithash 

49) git commit -m --allow-empty "No-ops commit"

50) git rev-list --count main 

51) git worktree add 

52) git worktree list 

53) git worktree remove 

54) git show first-parent 

55) git config --global core.symlinks true 

56) git -c core.symlinks=true 

57) git rm -r --cached submoduel_name/

58) git commit --amend


                                                        git commands practice 

1) git add -A 

2) git commit -a -m "New commit"

3) git config --global alias.ac "!git add -A && git commit -m"

4) git revert head 

5) git revert commithash 

6) git reflog 

7) git log -S "text changed"

8) git log --decorate --oneline --graph 

9) git branch -vv 

10) git branch -vv | awk '/: gone]{print$1}'

11) git branch -vv | awk '/: gone]{print$1}' | xargs git branch -d 

12) git stash save "stash saved"

13) git stash list 

14) git stash pop 

15) git stash apply stash{0}

16) git bisect start 

17) git bisect good 

18) git bisect bad 

19) git remote update --prune 

20) git reset --hard origin/main 

21) git grep -i -n "key word"

22) git grep -l -E main\(.+\)

23) git grep -L -E main\(.+\) -- "*.py"

24) git rebase -i origin/main 

25) git rebase --continue 

26) git rebase --abort 

27) git rebase -i root 

28) git checkout - 

29) git checkout -b "new_branch"

30) git push --force origin main 

31) git push --set-upstream origin main

32) git push -4 

33) git pull -4

34) git submodule add url 

35) git clone empty empty_clone2 --recusrsive

36) git submodule update --init 

37) git submodule update --init --recursive

38) git rm submodule_name/

39) git diff --staged 

40) git rev-list --count main 

41) git config --global help.autocorrect 1

42) git config --global help.autocorrect 0

43) git config feature.manyFiles 1

44) time git status 

45) git tag -L

46) git remote -v 

47) git init empty_repo 

48) git amend commithash 

49) git commit -m --allow-empty  "No-ops commit"

50) git show